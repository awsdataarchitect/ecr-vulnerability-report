import * as cdk from 'aws-cdk-lib';
import { Stack, StackProps } from 'aws-cdk-lib';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as sfn from 'aws-cdk-lib/aws-stepfunctions';
import * as tasks from 'aws-cdk-lib/aws-stepfunctions-tasks';
import { Role, ServicePrincipal, PolicyStatement } from 'aws-cdk-lib/aws-iam';

export class EcrVulnerabilityReportStack extends Stack {
  constructor(scope: cdk.App, id: string, props?: StackProps) {
    super(scope, id, props);

    // Create DynamoDB Table to store ECR vulnerability reports
    const table = new dynamodb.Table(this, 'ECRVulnerabilityReports', {
      tableName: 'ECRVulnerabilityReports',
      partitionKey: { name: 'repository-name', type: dynamodb.AttributeType.STRING },
      sortKey: { name: 'image-digest', type: dynamodb.AttributeType.STRING },
      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST
    });

    // Create a role for Step Functions with permissions to write to DynamoDB
    const stepFunctionRole = new Role(this, 'StepFunctionRole', {
      roleName: 'ECR-StepFunctionRole',
      assumedBy: new ServicePrincipal('states.amazonaws.com')
    });

    stepFunctionRole.addToPolicy(new PolicyStatement({
      actions: ['dynamodb:PutItem'],
      resources: [table.tableArn]
    }));

    // Define Step Function task to write to DynamoDB
    const putItem = new tasks.CallAwsService(this, 'PutItemInDynamoDB', {
      service: 'dynamodb',
      action: 'putItem',
      parameters: {
        TableName: table.tableName,
        Item: {
          'repository-name': { 'S': sfn.JsonPath.stringAt('$.detail.repository-name') },
          'image-digest': { 'S': sfn.JsonPath.stringAt('$.detail.image-digest') },
          'timestamp': { 'S': sfn.JsonPath.stringAt('$.time') },
          'finding-severity-counts': { 'S': sfn.JsonPath.stringAt('$.detail.finding-severity-counts') }
        }
      },
      iamResources: [table.tableArn],
      resultPath: sfn.JsonPath.DISCARD,
    });

    // Define the Step Function
    const definition = sfn.Chain.start(putItem);

    const stateMachine = new sfn.StateMachine(this, 'StateMachine', {
      stateMachineName: 'ECRVulnerabilityReport',
      definitionBody: sfn.DefinitionBody.fromChainable(definition),
      role: stepFunctionRole,
      timeout: cdk.Duration.minutes(5)
    });

    // Create EventBridge rule to trigger the Step Function on ECR image scan completion
    const eventRule = new events.Rule(this, 'ECRImageScanRule', {
      ruleName: 'ECRImageScanRule',
      description: 'Trigger Step Function when ECR image scan completes',
      eventPattern: {
        source: ['aws.ecr'],
        detailType: ['ECR Image Scan'],
        detail: {
          'scan-status': ['COMPLETE']
        }
      },
    });

    // Add Step Function as the target of the EventBridge rule
    eventRule.addTarget(new targets.SfnStateMachine(stateMachine));


  }
}

const app = new cdk.App();
new EcrVulnerabilityReportStack(app, 'EcrVulnerabilityReportStack');
app.synth();
