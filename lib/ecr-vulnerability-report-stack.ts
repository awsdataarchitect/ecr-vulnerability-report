import * as cdk from 'aws-cdk-lib';
import { Stack, StackProps } from 'aws-cdk-lib';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as sfn from 'aws-cdk-lib/aws-stepfunctions';
import * as tasks from 'aws-cdk-lib/aws-stepfunctions-tasks';
import { Role, ServicePrincipal, PolicyStatement, PolicyDocument } from 'aws-cdk-lib/aws-iam';
import * as sns from 'aws-cdk-lib/aws-sns';
import * as sns_subscriptions from 'aws-cdk-lib/aws-sns-subscriptions';

export class EcrVulnerabilityReportStack extends Stack {
  constructor(scope: cdk.App, id: string, props?: StackProps) {
    super(scope, id, props);

    // Create DynamoDB Table to store ECR vulnerability reports
    const table = new dynamodb.Table(this, 'ECRVulnerabilityReports', {
      tableName: 'ECRVulnerabilityReports',
      partitionKey: { name: 'repository-name', type: dynamodb.AttributeType.STRING },
      sortKey: { name: 'image-digest', type: dynamodb.AttributeType.STRING },
      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST
    });

    // Create a role for Step Functions with permissions to write to DynamoDB
    const stepFunctionRole = new Role(this, 'StepFunctionRole', {
      roleName: 'ECR-StepFunctionRole',
      assumedBy: new ServicePrincipal('states.amazonaws.com')
    });

    stepFunctionRole.addToPolicy(new PolicyStatement({
      actions: ['dynamodb:PutItem', 'dynamodb:UpdateItem'],
      resources: [table.tableArn]
    }));

    stepFunctionRole.addToPolicy(new PolicyStatement({
      actions: ['ecr:DescribeImageScanFindings', 'ecr:DescribeRepositories',"ecr:GetRegistryScanningConfiguration"],
      resources: ['*']
    }));

    stepFunctionRole.addToPolicy(new PolicyStatement({
      actions: ["inspector2:ListCoverage","inspector2:ListFindings"],
      resources: ['*']
    }));

    // Define Step Function tasks 
    const getRegistryScanningConfiguration = new tasks.CallAwsService(this, 'GetRegistryScanningConfiguration', {
      service: 'ecr',
      action: 'getRegistryScanningConfiguration',
      parameters: {
      },
      iamResources: ['*'],
      resultPath: '$.repositoryInfo',
    });

    // Define Step Function tasks 
    const putInitialItem = new tasks.CallAwsService(this, 'PutItemInDynamoDB', {
      service: 'dynamodb',
      action: 'putItem',
      parameters: {
        TableName: table.tableName,
        Item: {
          'repository-name': { 'S': sfn.JsonPath.stringAt('$.detail.repository-name') },
          'image-digest': { 'S': sfn.JsonPath.stringAt('$.detail.image-digest') },
          'timestamp': { 'S': sfn.JsonPath.stringAt('$.time') },
          'finding-severity-counts': { 'S': sfn.JsonPath.stringAt('$.detail.finding-severity-counts') }
        }
      },
      iamResources: [table.tableArn],
      resultPath: sfn.JsonPath.DISCARD,
    });

    const describeScanFindings = new tasks.CallAwsService(this, 'DescribeImageScanFindings', {
      service: 'ecr',
      action: 'describeImageScanFindings',
      parameters: {
        RepositoryName: sfn.JsonPath.stringAt('$.detail.repository-name'),
        ImageId: {
          'ImageDigest': sfn.JsonPath.stringAt('$.detail.image-digest')
        }
      },
      iamResources: ['*'],
      resultPath: '$.scanFindings',
    });

    const describeInspectorFindings = new tasks.CallAwsService(this, 'DescribeInspectorScanFindings', {
      service: 'ecr',
      action: 'describeImageScanFindings',
      parameters: {
        RepositoryName: sfn.JsonPath.stringAt('$.detail.repository-name'),
        ImageId: {
          'ImageDigest': sfn.JsonPath.stringAt('$.detail.image-digest')
        }
      },
      iamResources: ['*'],
      resultPath: '$.scanFindings',
    });

    const updateItemWithFindings = new tasks.CallAwsService(this, 'UpdateItemWithFindings', {
      service: 'dynamodb',
      action: 'updateItem',
      parameters: {
        TableName: table.tableName,
        Key: {
          'repository-name': { 'S': sfn.JsonPath.stringAt('$.detail.repository-name') },
          'image-digest': { 'S': sfn.JsonPath.stringAt('$.detail.image-digest') }
        },
        UpdateExpression: 'SET vulnerabilities = :v',
        ExpressionAttributeValues: {
          ':v': { 'S': sfn.JsonPath.jsonToString(sfn.JsonPath.objectAt('$.scanFindings.ImageScanFindings.Findings')) }
        }
      },
      iamResources: [table.tableArn],
      resultPath: sfn.JsonPath.DISCARD,
    });

    const updateItemWithInspectorFindings = new tasks.CallAwsService(this, 'UpdateItemWithInspectorFindings', {
      service: 'dynamodb',
      action: 'updateItem',
      parameters: {
        TableName: table.tableName,
        Key: {
          'repository-name': { 'S': sfn.JsonPath.stringAt('$.detail.repository-name') },
          'image-digest': { 'S': sfn.JsonPath.stringAt('$.detail.image-digest') }
        },
        UpdateExpression: 'SET vulnerabilities = :v',
        ExpressionAttributeValues: {
          ':v': { 'S': sfn.JsonPath.jsonToString(sfn.JsonPath.objectAt('$.scanFindings.ImageScanFindings.EnhancedFindings')) }
        }
      },
      iamResources: [table.tableArn],
      resultPath: sfn.JsonPath.DISCARD,
    });

    // Define the Step Function
    const definition = sfn.Chain.start(getRegistryScanningConfiguration)
      .next(putInitialItem)
      .next(

        new sfn.Choice(this, 'IsEnhancedScanningEnabled')
          .when(
            sfn.Condition.stringEquals(
              sfn.JsonPath.stringAt('$.repositoryInfo.ScanningConfiguration.ScanType'),
              'ENHANCED'
            ),
            sfn.Chain.start(describeInspectorFindings)
            .next(updateItemWithInspectorFindings)
          )
          .otherwise(
            sfn.Chain.start(describeScanFindings)
              .next(updateItemWithFindings)
          )
      );

    const stateMachine = new sfn.StateMachine(this, 'StateMachine', {
      stateMachineName: 'ECRVulnerabilityReport',
      definition: definition,
      role: stepFunctionRole,
      timeout: cdk.Duration.minutes(5),
    });

    // Create EventBridge rule to trigger the Step Function on ECR image scan completion
    const eventRule = new events.Rule(this, 'ECRImageScanRule', {
      ruleName: 'ECRImageScanRule',
      description: 'Trigger Step Function when ECR image scan completes',
      eventPattern: {
        source: ['aws.ecr'],
        detailType: ['ECR Image Scan'],
        detail: {
          'scan-status': ['COMPLETE'],
        },
      },
    });

    // Add Step Function as the target of the EventBridge rule
    eventRule.addTarget(new targets.SfnStateMachine(stateMachine, {
      role: new Role(this, 'EventBridgeToStepFunctionRole', {
        roleName: 'EventBridgeToStepFunctionRole',
        assumedBy: new ServicePrincipal('events.amazonaws.com'),
        inlinePolicies: {
          allowStepFunctionExecution: new PolicyDocument({
            statements: [new PolicyStatement({
              actions: ['states:StartExecution'],
              resources: [stateMachine.stateMachineArn],
            })],
          }),
        },
      }),
    }));

    // Create SNS Topic for notifications
    const snsTopic = new sns.Topic(this, 'HighSeverityFindingsTopic', {
      topicName: 'HighSeverityFindingsTopic',
      displayName: 'High Severity Findings Topic',
    });

    // Add email subscription to the SNS topic
    snsTopic.addSubscription(new sns_subscriptions.EmailSubscription('your-email@example.com'));

    // Create EventBridge rule to send SNS notifications for high severity findings
    const highSeverityRule = new events.Rule(this, 'HighSeverityRule', {
      ruleName: 'HighSeverityRule',
      description: 'Send SNS notification for high severity findings',
      eventPattern: {
        source: ['aws.ecr'],
        detailType: ['ECR Image Scan'],
        detail: {
          'scan-status': ['COMPLETE'],
          'finding-severity-counts.HIGH': [{ numeric: ['>', 0] }],
        },
      },
    });

    // Add SNS topic as the target of the EventBridge rule
    highSeverityRule.addTarget(new targets.SnsTopic(snsTopic));
  }
}